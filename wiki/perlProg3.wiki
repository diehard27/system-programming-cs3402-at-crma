#summary การเขียนโปรแกรมด้วย Perl 3
<table width=500>
<td>
[CourseSchedule2555_2 กลับไปหน้าหลัก]-->[<a href="https://code.google.com/p/system-programming-cs3402-at-crma/wiki/CourseSchedule2555_2#ตารางเรียน_๒๕๕๕/๒">ตารางเรียน</a>]==>Next: [perlProg4 การโปรแกรม Perl 4]<br>
[perlProg2 Previous]<==
<wiki:toc max_depth="3" />

=Conditions=
เงื่อนไขใน perl สามารถกำหนดได้ด้วยประโยคคำสั่ง if/else ตามรูปแบบต่อไปนี้
{{{
if(<condition>) {
  ..do something
}
else {
  ..do other thing
}
}}}
หรือในรูปแบบ elseif
{{{
if(<condition>) {
  ..do something
}
elseif {
  ..do other thing
}
elseif {
  ..do more thing
}
}}}


โดยที่ condition ใน Perl จะเป็นไปตามตารางต่อไปนี้
||Operation ||Numeric Version ||String Version||
||น้อยกว่า ||< ||lt||
||น้อยกว่าหรือเท่ากับ ||<=|| le||
||มากกว่า|| >|| gt||
||มากกว่าหรือเท่ากับ|| >=|| ge||
||เท่ากับ|| == ||eq||
||ไม่เท่ากับ||!=|| ne||
||เปรียบเทียบ ||<=> ||cmp||

{{{
# cond1.pl
$a = 1;
$b = 7;
print "a=$a, b=$b\n";
if($a == $b)
{
print "numbers are equal\n";
}
else
{
print "numbers are not equal\n";
}
#
$c = 7.3;
$d = 7.3;
print "c=$c, d=$d\n";
if($c == $d)
{
print "numbers are equal\n";
}
else
{
print "numbers are not equal\n";
}
}}}
รันสคริปต์ cond1.pl จะได้ผลลัพธ์ดังนี้
{{{
prachya@pcubusrv104> perl cond1.pl
a=1, b=7
numbers are not equal
c=7.3, d=7.3
numbers are equal
}}}

{{{
# cond2.pl
$char1 = 'a';
$char2 = 'A';
print "char1=$char1, char2=$char2\n";
if($char1 eq $char2)
{
print "characters are equal"
}
else
{
print "characters are not equal";
}
print "\n";
#
$string1 = "willi";
$string2 = "willI";
print "string1=$string1, string2=$string2\n";
if($string1 ne $string2)
{
print "string1 is not the same as string2\n";
}
else
{
print "strings 1 and string2 are the same\n";
}
}}}
เมื่อรันสคริปต์จะได้ผลลัพธ์
{{{
prachya@pcubusrv104> perl cond2.pl
char1=a, char2=A
characters are not equal
string1=willi, string2=willI
string1 is not the same as string2
}}}

=Arguments=
Perl สามารถรับค่า arguments มาจากการรันผ่านเชลล์ได้ เช่น hello.pl 12 34 56 คล้ายกับการผ่านค่าตัวแปรเข้าสู่โปรแกรมในเชลล์สคริปต์
==ตัวแปร $ARGV==
ตัวแปร $ARGV เป็นอาเรย์ของสตริงของ arguments ที่ส่งผ่าน command line เข้ามายังสคริปต์ของเพิร์ล สามารถอ้างถึงตัวแปรเหล่านั้นด้วยการกำหนดดัชนี โดยตัวแปรตัวแรกใช้ดัชนีเท่ากับ 0 เช่น {{{$ARGV[0]}}} ยกตัวอย่างเช่นหากรันโปรแกรม
{{{
perl hello.pl 12 34
}}}
แล้วค่าของ {{{$ARGV[0]}}} คือ 12 ส่วน {{{$ARGV[1]}}} คือ 34
==จำนวนตัวแปร $#ARGV==
โปรแกรมเมอร์สามารถหาจำนวนตัวแปรที่ส่งเข้ามายังสคริปต์ได้จากตัวแปร {{{$#ARGV}}} เช่นจากตัวอย่างการรัน hello.pl สคริปต์ข้างต้นจะได้ค่า {{{$#ARGV}}} เท่ากับ 1 หากไม่ม่ตัวแปรส่งผ่านเข้ามา ค่าของ {{{$#ARGV}}} จะมีค่าเท่ากับ -1

ตัวอย่าง perl สคริปต์ต่อไปนี้แสดงให้เห็นความสัมพันธ์ของการส่งตัวแปรเข้าไปยังสคริปต์จาก command line
{{{
# arg.pl
print "arg count=$#ARGV\n";
print "0=$ARGV[0]\n";
print "1=$ARGV[1]\n";
print "2=$ARGV[2]\n";
}}}
ผลของการรันสคริปต์ที่มีการส่งผ่านตัวแปร
{{{
prachya@pcubusrv104> perl arg.pl 12 34 56
arg count=2
0=12
1=34
2=56
}}}
ผลของการรันสคริปต์ที่ไม่มีการส่งผ่านตัวแปรเข้าไป จะมีค่าของ $#ARGV= -1
{{{
prachya@pcubusrv104> perl arg.pl
arg count=-1
0=
1=
2=
}}}

ตัวอย่างต่อไปนี้เป็นสคริปต์ mycal.pl ที่ใช้ตัวแปร ARGV ในการคำนวณแบบเครื่องคิดเลข
{{{
#!/usr/bin/perl -w
#SRC: http://www.cyberciti.biz/faq/howto-pass-perl-command-line-arguments/
if ($#ARGV != 2 ) {
        print "usage: mycal number1 op number2\neg: mycal 5 + 3 OR mycal 5 - 2\n";
        exit;
}
$n1=$ARGV[0];
$op=$ARGV[1];
$n2=$ARGV[2];
$ans=0;
if ( $op eq "+" ) {
        $ans = $n1 + $n2;
}
elsif ( $op eq "-"){
        $ans = $n1 - $n2;
}
elsif ( $op eq "/"){
        $ans = $n1 / $n2;
}
elsif ( $op eq "*"){
        $ans = $n1 * $n2;
}
else {
        print "Error: op must be +, -, *, / only\n";
        exit;
}
print "$ans\n";
}}}
ผลลัพธ์ของการรันสคริปต์ mycal.pl
{{{
prachya@pcubusrv104> ./mycal.pl
usage: mycal number1 op number2
eg: mycal 5 + 3 OR mycal 5 - 2
prachya@pcubusrv104> ./mycal.pl 5 + 3
8
prachya@pcubusrv104> ./mycal.pl 34 / 3
11.3333333333333
}}}

=Perl Special Variable=
ดูรายละเอียดของตัวแปรพิเศษใน [perlSpecialVars ลิงค์นี้]
ตัวอย่างการใช้งาน
{{{
# time.pl
print "$^T\n";
}}}
เมื่อรันสคริปต์จะได้ค่าของเวลา (เป็นวินาที) ขณะที่รันซึ่งสามารถนำไปประยุกต์ใช้คำนวณหาเวลาทั้งหมดหรือบางส่วนที่สคริปต์รัน
{{{
prachya@pcubusrv104> perl time.pl
1352186777
prachya@pcubusrv104> perl time.pl
1352186778
}}}

=Logical Operators=

=Loops=

==for loop==

==while loop==

==until loop==

==foreach loop==

=goto Statement=

=Mathematical Functions=

=Bitwise Operations=





=References=
  # Wiil-Hans Steeb, et al, _Linux, Shell Programming and Perl_ [http://issc.uj.ac.za/downloads/linux.pdf  PDF]
----
[CourseSchedule2555_2 กลับไปหน้าหลัก]-->[<a href="https://code.google.com/p/system-programming-cs3402-at-crma/wiki/CourseSchedule2555_2#ตารางเรียน_๒๕๕๕/๒">ตารางเรียน</a>]-->Next: [perlProg4 การโปรแกรม Perl 4]

[https://code.google.com/p/system-programming-cs3402-at-crma/w/edit/perlProg3 Edit]