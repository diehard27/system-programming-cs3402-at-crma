#summary การเขียนโปรแกรมด้วย Perl 4
<table width=500>
<td>
[CourseSchedule2555_2 กลับไปหน้าหลัก]-->[<a href="https://code.google.com/p/system-programming-cs3402-at-crma/wiki/CourseSchedule2555_2#ตารางเรียน_๒๕๕๕/๒">ตารางเรียน</a>]-->Next: [perlProgApp การประยุกต์ใช้ Perl]<br>
[perlProg3 Previous]<==
<wiki:toc max_depth="3" />

=printf และ sprintf=
รูปแบบการใช้งาน printf และ sprintf
{{{
sprintf FORMAT, LIST
}}}
เพิร์ลเลียนแบบการทำงานของ printf และ sprintf ในภาษา C ทำให้ผู้ที่คุ้นเคยกับการโปรแกรมภาษา C สามารถใช้ฟังก์ชันนี้ได้โดยง่าย ยกตัวอย่างเช่น ต้องการฟอร์แม็ตตัวแปร result และ rounded ให้มีผลลัพธ์ที่ต้องกาสามารถใช้ sprintf ได้ดังนี้
{{{
        # Format number with up to 8 leading zeroes
        $result = sprintf("%08d", $number);
        # Round number to 3 digits after decimal point
        $rounded = sprintf("%.3f", $number);
}}}
รูปแบบทั่วไปที่เหมือน C
{{{
   %%	a percent sign
   %c	        a character with the given number
   %s	        a string
   %d	a signed integer, in decimal
   %u	an unsigned integer, in decimal
   %o	an unsigned integer, in octal
   %x   	an unsigned integer, in hexadecimal
   %e  	a floating-point number, in scientific notation
   %f	        a floating-point number, in fixed decimal notation
   %g	a floating-point number, in %e or %f notation
}}}

=Say=
ในเพิร์ลเราสามารถใช้คำสั่ง say ได้คล้ายกับการทำงานของ print ดังตัวอย่างต่อไปนี้
{{{
use v5.10.1;
@array = (1, 2, 3, undef, 4, 5);
print @array;
print "\n";
say "some elements undefined" if undef ~~ @array;
}}}

=System Calls=
{{{
#!/usr/bin/perl
# sys1.pl

@files = qx(ls /proc);
#print @files;
my $i=0;
foreach my $f (@files) {
  print "$i : $f";
  $i++;
}
}}}

{{{
 #!/usr/bin/perl
    use strict;
    use warnings;
    my $info = qx(uptime);
    print "Uptime is: $info\n";
}}}
สามารถใช้ back tick (')  แทนการเรียกฟังก์ชัน qx() ได้
{{{
    #!/usr/bin/perl
    use strict;
    use warnings;
    my @info = `who`;
    foreach my $i (@info) {
        print "$i is online\n";
    }
}}}

=List Operation=
list จะถูกเก็บไว้ในอาร์เรย์ ซึ่งสามารถถ้างถึงตัวแปรแต่ละตัวด้วยดัชนี (index) ตามตัวอย่างต่อไปนี้
{{{
@myarray = (7, "Egoli", 1.23, "\"Having fun?\"", 9.23e-10);
}}}
ดังนั้น ตัวแปรตัวแรก และตัวแปรถัดไปคือ
{{{
myarray[0] = 7; myarray[1] = "Egoli";
}}}
ตัวอย่างต่อไปแสดงการนับตัวแปรใน list 
{{{
# mylist.pl #
@myarray = (7, "Egoli", 1.23, "\"Having fun?\"", 9.23e-10);
$count = 0;
while($count <= 5)
{
   print("element $count is $myarray[$count]\n");
$count++; }
}}}
โปรแกรมต่อไปนี้แสดงตัวอย่างการใช้ list operators แบบต่าง ๆ รวมถึงการตั้งค่าตัวแปรโดยตรงจากอาเรย์ (x,y,z)
{{{
# array operations
# array.pl
#
@fruit = ("apples ", "pears ", "banana ");
@cities = ("Egoli ", "Cape Town ", "Durban ", "Pretoria ");
@numbers = ("4", "7", "9", "12", "15");
print @fruit;
print "\n";
print $cities[2]; # => Durban
print "\n";
if($numbers[2] != $numbers[4])
{
$sum = $numbers[2] + $numbers[4];  # => 24
print($sum);
print("\n");
}
else
{
$difference = $numbers[2] - $numbers[4];
print $difference;
print "\n";
}
($x, $y, $z) = @cities;
print $x;
print "\n";
print $z;
print "\n";
# => Egoli
# => Durban
}}}

=push และ pop=
ตัวอย่างสคริปต์ต่อไปนี้แสดงการใช้งานคำสั่ง push และ pop เพื่อเก็บค่าเข้าไปในอาร์เรย์ หรือดึงค่าออกมาจากอาร์เรย์
{{{
@fruit = ("apples ", "pears ", "banana ");
@cities = ("Egoli ", "Cape Town ", "Durban ", "Pretoria ");
@morecities = ("George", "Bloemfontain");
push(@cities, "Grahamstown");
print @cities;
print "\n";
push(@fruit, "strawberries ", "peach ", "plums ");
print @fruit;
print "\n";
push(@cities, @morecities);
$mycity = pop(@cities);
print $mycity;
print "\n";
}}}
ตัวอย่างการใช้งานคำสั่ง pop
{{{
@s = ("AAAA","BBB");
$tmp = pop(@s);
print $tmp;
}}}

=split และ  join=
split ใช้ในการแยกคำหรือส่วนของคำออกจากกันให้อยู่ในรูปของอาร์ย์ โดยผู้ใช้กำหนดตัวแยก เช่น คอมม่า หรือ เซมิโคลอน ส่วน join ใช้ในการเชื่อมค่าของตัวแปรในอาร์เรย์เข้าด้วยกัน ดังแสดงในตัวอย่างต่อไปนี้  ตัวแปร sting  เป็นตัวแปรแบบสตริง ในที่นี้เราจะกำหนดให้ คอมม่าเป็นตัวแบ่งคำ แล้วเก็บไว้ในอาร์เรย์ myarray ส่วนคำสั่ง join ใช้ต่อคำในอาร์เรย์ names ให้เป็นสตริงตัวเดียวชื่อ concatstring
{{{
# mysplit.pl
# splitting a string into a list
#
$string = "otto, carl, ludwig, berlin:postdam";
@myarray = split(/,/, $string);
print "@myarray\n"; # => otto carl ludwig berlin:postdam
print("\n");
print $myarray[2];   # => ludwig
print("\n");
@names = ("Egoli-", "Gauteng ", "Johannesburg");
$concatstring = join("", @names);
print("$concatstring");
}}}

=Associative Array Operations=

{{{
# assoc.pl
%ages = ( "Ludwig Otto", 40,  "Franz Karl", 32,
          "Jane Coppersmith", 21, "Dan Smithlone", 67);
print $ages{"Ludwig Otto"};  # => 40
print("\n");
print $ages{"Jane Coppersmith"}; # => 21
print("\n");
# adding an element
$ages{"Henry VIII"} = 1654;  # !! curly brackets
print %ages;
print("\n");
# deleting an element
delete($ages{"Franz Karl"});
print %ages;
print("\n");
@myarray = keys(%ages);
print @myarray;          # => only the names
print("\n");
@valuearray = values(%ages);
print("@valuearray");       # => only the values
print("\n\n");
while(($name, $value) = each(%ages))
{
   print($name);
   print(" ");
   print($value);
   print("\n");
}
}}}

=Pattern Matching=
perl ใช้ regular expression  โอเปอเรเตอร์
{{{
=~
}}}
ในการค้นหา matching  และแทนส่วนที่ต้องการ จากตัวอย่างข้างล่าง สคริปต์จะทำการค้นหาคำว่า please ในคำตอบที่ผู้ใช้ป้อนเข้ามาในตัวแปร question และจะทำการพิมพ์เมื่อคำที่ป้อนเข้ามามีคำว่า please จากนั้นพิมพ์คำว่า Thank you for being polite
{{{
# matching.pl
print("Ask me a question politely:\n");
$question = <STDIN>;
if($question =~ /please/)
{
   print("Thank you for being polite!");
}
else {
   print("That was not very polite!\n");
}
}}}

=Regular Expression=
Regular expression เป็นแพ็ทเทิร์นที่ใช้ในการเปรียบเทียบสตริง หรือ combination ของสตริง
{{{
s/pattern/replacement/
options for the substitution operator
g change all occurence of the pattern
i ignore case in pattern
e evaluate replacement string as expression
m treat string to be matched as multiple lines
o evaluate only once
s treat string to be matched as single line
x ignore white space in pattern
}}}

ตัวอย่างแรกเป็นการแสดงการแทนที่คำว่า 123 ในสตริง string ด้วย 4567 โดยใช้ pattern matching โอเปอเรเตอร์ =~ 
{{{
# replace1.pl
$string = "abc123def";
$string =~ s/123/4567/;
print("$string\n"); # => abc4567def
}}}

ตัวอย่างต่อไปแสดงการใช้ตัวแปร global variable {{{$_}}} กับคำสั่ง  pattern matching {{{s/<word>/<substitution>/<options>}}} หาอักษรอังกฤษตัวใหญ่ใด ๆ [A-Z] แล้วแทนด้วย +[A-Z]+ โดยใช้ regular expression {{{/+\1+/}}} pattern matching ส่วนที่สอง ทำคล้ายกันแต่กับอักษรตัวเล็กทั้งหมดโดยแทนด้วย [a-z]+ ไม่มีเครื่องหมายบวกด้านหน้า
{{{
# regexp1.pl
$_ = "Egoli Gauteng";
s/([A-Z])/+\1+/g;     # acts on global scalar variable $_
print("$_");          # => +E+goli +G+auteng
print("\n");
s/([a-z])/\1+/g;
print("$_");          # => +E+g+o+l+i+ +G+a+u+t+e+n+g+
print("\n");
}}}

{{{
# replace2.pl
@input = <STDIN>;
$count = 0;
while($input[$count] ne "")
{
  $input[$count] =~ s/^[ \t]+//;
  $input[$count] =~ s/[ \t]+\n$/\n/;
  $input[$count] =~ s/[ \t]+/ /g;
  $count++;
}
print("Formatted text:\n");
print(@input);
}}}
บรรทัดนี้ตรวจสอบ ในกรณีที่มี space หรือ tab ที่จุดเริ่มต้นของบรรทัด ถ้ามีให้เอาส่วนนั้นออกจากสตริงเป้าหมาย
{{{
$input[$count] =~ s/^[ \t]+//;
}}}
บรรทัดต่อไปนี้ ตรวจสอบว่ามี space หรือ tab ที่ท้ายบรรทัดหรือไม่ ถ้ามีให้นำออกจากสตริงเป้าหมาย
{{{
$input[$count] =~ s/[ \t]+\n$/\n/;
}}}
บรรทัดต่อไปนี้ ใช้ตัวเลือก g หรือ global เพื่อกำจัด space และ tab ระหว่างคำทั้งหมด
{{{
$input[$count] =~ s/[ \t]+/ /g 
}}}

=แบบฝึกหัด=
==ออกเลขรางวัล==
ตัวอย่างต่อไปนี้แสดงการใช้งาน random function ของ perl และการใช้งาน sprint เพื่อออกเลขรางวัล 6 หลัก พร้อมให้แสดงเลขท้ายสามตัว และเลขท้ายสองตัว
{{{
# rand.pl
my $random = rand(1000000);
my $first = sprintf("%06d", $random);
my $last3 = sprintf("%03d", rand(1000));
my $last2 = sprintf("%02d", rand(100));
print "First Prize = $first", "\n";
print "Last 3 Prize = $last3", "\n";
print "Last 2 Prize = $last2", "\n";
}}}
ผลการรันโปรแกรม rand.pl
{{{
prachya@pcubusrv104> perl rand.pl
First Prize = 103298
Last 3 Prize = 776
Last 2 Prize = 84
}}}

เพิ่มส่วนการป้อนตัวเลขให้ผู้ใช้งานทาย
{{{
print "Please enter 6-digit number: ";
$yournum = <STDIN>;
my $random = rand(1000000);
my $first = sprintf("%06d", $random);
my $last3 = sprintf("%03d", rand(1000));
my $last2 = sprintf("%02d", rand(100));
print "First Prize = $first", "\n";
print "Last 3 Prize = $last3", "\n";
print "Last 2 Prize = $last2", "\n";
if ($yournum==$first) {
  print "!!!You have won the first prize\n";
} elsif ($yournum==$last3) {
  print "!!!You have won the last-3 prize\n";
} elsif ($yournum==$last2) {
  print "!!!You have won the last-2 prize\n";
} else {
  print "You didn\'t win.\n";
}
}}}

ผลการรันสคริปต์ rand2.pl
{{{
prachya@pcubusrv104> perl rand2.pl
Please enter 6-digit number: 258963
First Prize = 331268
Last 3 Prize = 784
Last 2 Prize = 96
You didn't win.
}}}

เพิ่ม until loop เพื่อให้ผู้ใช้ทายไปเรื่อย ๆ และออกจากโปรแกรมด้วยการป้อนศูนย์
{{{
$yournum=123456;
until ($yournum=="000000") {
print "Please enter 6-digit number (000000 to quit): ";
$yournum = <STDIN>;
my $random = rand(1000000);
my $first = sprintf("%06d", $random);
my $last3 = sprintf("%03d", rand(1000));
my $last2 = sprintf("%02d", rand(100));
print "First Prize = $first", "\n";
print "Last 3 Prize = $last3", "\n";
print "Last 2 Prize = $last2", "\n";
if ($yournum==$first) {
  print "!!!You have won the first prize\n";
} elsif ($yournum==$last3) {
  print "!!!You have won the last-3 prize\n";
} elsif ($yournum==$last2) {
  print "!!!You have won the last-2 prize\n";
} else {
  print "You didn\'t win.\n";
}
}
}}}

=References=
  # Wiil-Hans Steeb, et al, _Linux, Shell Programming and Perl_ [http://issc.uj.ac.za/downloads/linux.pdf  PDF]
  # perldoc.perl.org, http://perldoc.perl.org/5.8.8/functions/sprintf.html
  # System Calls, http://perlmeme.org/faqs/system/system.html
----
[CourseSchedule2555_2 กลับไปหน้าหลัก]-->[<a href="https://code.google.com/p/system-programming-cs3402-at-crma/wiki/CourseSchedule2555_2#ตารางเรียน_๒๕๕๕/๒">ตารางเรียน</a>]-->Next: [perlProgApp การประยุกต์ใช้ Perl]<br>
[perlProg3 Previous]<==

[https://code.google.com/p/system-programming-cs3402-at-crma/w/edit/perlProg4 Edit]