#summary การเขียนโปรแกรมด้วยเชลล์สคริปต์ (ต่อ)
<table width=500>
<td>
[CourseSchedule2555_2 กลับไปหน้าหลัก]-->[<a href="https://code.google.com/p/system-programming-cs3402-at-crma/wiki/CourseSchedule2555_2#ตารางเรียน_๒๕๕๕/๒">ตารางเรียน</a>]
----
<wiki:toc max_depth="3" />
----
==การเปรียบเทียบสตริง==
การเปรียบเทียบสตริง เป็นไปตามการกำหนดเงื่อนไขต่อไปนี้

||string||เป็นจริงถ้าสตริงที่กำหนดไม่เป็นสตริงที่ว่างเปล่า||
||str1 = str2||เป็นจริงถ้าทั้งสองเท่ากัน||
||str1 != str2||เป็นจริงถ้าทั้งสองไม่เท่ากัน||
||-n str1||เป็นจริงถ้า str1 ไม่เป็น null||
||-z str1||เป็นจริงถ้า str1 เป็น null||

<font color=red>หมายเหตุ: </font> ต้องเว้น 1 space หลัง "if [" และ 1 space ก่อนปิดวงเล็บ " ]"

ตัวอย่าง
{{{
$ string1="Yahoo"
$ string2="Yahoopp"
$ if [ $string1 = $string2 ]; then
> echo "Strings are the same"
> else
> echo "Strings are different"
> fi
}}}
ผลลัพธ์
{{{
Strings are different
}}}

==การเปรียบเทียบค่าทางคณิตศาสตร์==
การเปรียบเทียบค่าทางคณิตศาสตร์

||expr1 -eq expr2||เป็นจริงถ้าค่าของทั้งสองพจน์เท่ากัน||
||expr1 -ne expr2||เป็นจริงถ้าค่าของทั้งสองพจน์ไม่เท่ากัน||
||expr1 -gt expr2||เป็นจริงถ้า expr1 มากกว่า expr2||
||expr1 -ge expr2||เป็นจริงถ้า expr1 มากกว่าหรือเท่ากับ expr2||
||expr1 -lt expr2||เป็นจริงถ้า expr1 น้อยกว่า expr2||
||expr1 -le expr2||เป็นจริงถ้า expr1 น้อยกว่าหรือเท่ากับ expr2||
||! expr||กลับค่า expr ถ้า expr เป็นจริงจะให้ !expr จะเป็นเท็จ||

ตัวอย่าง
{{{
$ num1=10
$ num2=14
$ if [ $num1 -gt $num2 ]; then
> echo "$num1 is greater than $num2"
> else
> echo "$num1 is less than $num2"
> fi
}}}
ผลลัพธ์
{{{
10 is less than 14
}}}

นอกจากนั้นแล้วยังสามารถใช้เครื่องหมายวงเล็บสองชั้น เช่น ((c=c+1)) หรือ ((X<5)) เพื่อช่วยในการประมวลผลทางคณิตศาสตร์ของสตริงให้เป็นแบบตัวเลข

==โครงสร้างการควบคุม==
โครงสร้างการควบคุม (control structures) เป็นคำสั่งที่เกี่ยวข้องกับการกำหนดทิศทาง หรือขั้นตอนการทำงานของโปรแกรม ซึ่งสามารถใช้คำสั่ง if, else if, for, while, until, หรือ case ได้ตามรายละเอียดและตัวอย่างต่อไปนี้
===if===
if ใช้สำหรับกำหนดเงื่อนไขให้โปรแกรมทำงานตามเงื่อนไขที่กำหนด มีรูปแบบการใช้งานที่ง่ายและเป็นไปตามธรรมชาติความเข้าใจของภาษา
{{{
if conditions
then
	statement
else
	statements
fi
}}}
ตัวอย่าง
{{{
#!/bin/bash
echo "Is it morning? Please answer yes or no"
read answ
if [ $answ = "yes" ]; then
	echo "Good morning na ja"
else
	echo "Good afternoon na ka"
fi
exit 0
}}}
สคริปต์ดังกล่าวตรวจสอบค่าของ $answ ว่าผู้ใช้ตอบกลับมาเป็น yes หรือไม่ และถ้าไม่ตอบ yes เราไม่จำเป็นต้องตรวจสอบว่าเป็น no ซึ่งจะเข้าอยู่ในเงื่อนไขของ else

===elif===
elif ย่อมาจาก else-if ใช้กรณีที่มีเงื่อนไขที่มากกว่าสอง และใช้อยู่ภายในกรอบ if...fi ตามตัวอย่างต่อไปนี้
{{{
#!/bin/bash
echo "Is it morning? Please answer yes or no"
read answ
if [ $answ = "yes" ]; then
	echo "Good morning na ja"
elif [ $answ = "no" ]; then
	echo "Good afternoon na ka"
else
	echo "Please enter only yes or no"
	exit 1
fi
exit 0
}}}
จากตัวอย่างการใช้ elif ข้างต้นจะเห็นได้ว่ามีเงื่อนไขที่มากกว่าตัวอย่างที่ผ่านมาซึ่งผู้เขียนโปรแกรมต้องการให้มีสามเงื่อนไข คำสั่ง exit 1 ให้ค่ากลับไปที่ shell เพื่อบอกให้รู้ว่ามีข้อผิดพลาดเกิดขึ้นในการใส่อินพุท

===for loop===
คำสั่ง for เป็นการวนลูปหรือทำซ้ำให้โปรแกรมทำงานตามรายการที่กำหนดไว้หลัง in มีรูปแบบโดยทั่วไปดังนี้
{{{
for variable in values
do
	statements
done
}}}
การควบคุมของลูปจะอยู่ภายในกรอบ do...done ตัวอย่างในบทก่อนหน้านี้ได้แสดงให้เห็นการใช้งาน for ลูป เช่น
{{{
for bc in Five Four Three Two One Fire
do
	echo $bc
done
}}}
จะให้ผลลัพธ์ที่หน้าจอเป็น
{{{
Five
Four
Tree
Two
One
Fire
}}}
ตัวอย่างต่อไปนี้เป็นการสั่งเครื่องพิมพ์ (หากมีการติดตั้งโปรแกรม lpr) โดยให้พิมพ์ไฟล์ chap3.txt chap4.txt และ chap5.txt
{{{
#!/bin/bash
for pfile in $(ls chap[345].txt); do
	lpr $pfile
done
}}}
สคริปต์นี้เรียกใช้โปรแกรม lpr ซึ่งจะส่งรายชื่อของไฟล์ด้วยการใช้ RE (regular expression)

===while loop===
while เป็นคำสั่งในการวนลูปคล้ายกับ for แต่ผู้ใช้สามารถกำหนดเงื่อนไขในการหยุดการวนซ้ำได้ตามต้องการไม่จำเป็นต้องไล่ไปตามลิสต์ที่กำหนดไว้ล่วงหน้าเหมือน for การใช้ while มีรูปแบบดังนี้
{{{
while conditions
do
	statements
done
}}}
ตัวอย่างต่อไปเป็นการใช้ลูป while ร่วมกับการทดสอบเงื่อนไขและการประมวลผลตัวเลข
{{{
#!/bin/bash
#while1.sh - by pyavincy@gmail.com
c=1
while [ "$c" -le 20 ]
do
	echo "Counting $c"
	c=$(($c+1))
done
exit 0
}}}
===until loop===
การใช้งาน until เป็นการควบคุมลูปคล้ายกับ while ต่างกันที่ until จะทดสอบเงื่อนไขหลังจากทำคำสั่ง done แล้วแต่ while จะทดสอบเงื่อนไขก่อนคำสั่ง do ตัวอย่างของการใช้ until มีดังนี้
{{{
until who | grep "$1" > /dev/null
do
	sleep 10
done
echo -e \\a
echo "$1 has just logged in!!""
exit 0
}}}
สคริปต์นี้จะทำงานไปเรื่อย ๆ จนกว่าจะมีคนล็อกอิน แล้วจะส่งสัญญาณเป็น ASCII ของ alert (bell) ด้วยการใช้ -e ร่วมกับเครื่องหมาย \ (backslash) คือ -e \\a  หรือบางครั้งเรียกว่า escaped characters เช่น \a = alert(bell), \b = backspace, \c suppress trailing newline, \f = form feed, \n = new line, \r = carriage return, \t horizontal tab, \v = vertical tab, \\ = backslash เป็นต้น

===case===
	ถึงแม้ว่าในการควบคุมทางเลือกของโปรแกรมจะสามารถใช้ if .. elif .. else .. fi ได้ก็ตาม หากมีทางเลือกหลายทางและมีความจำเป็นต้องประเมินเงื่อนไขที่ซับซ้อนขึ้น การใช้ case .. esac จะช่วยให้ผู้เขียนโปรแกรมมีความสะดวกมากขึ้น  รูปแบบของการใช้ case มีดังนี้
{{{
case variable in values
    pattern [ | pattern] ...) statements;;
    pattern [ | pattern] ...) statements;;
    ...
esac
}}}
ตัวอย่างต่อไปนี้เป็นการใช้งาน case ในการสร้างทางเลือกให้กับผู้ใช้
{{{
#!/bin/bash
echo "Is it morning? Pleas answer yes or no"
read answ
case "$answ" in
   "yes") echo "Good Morning";;
   "no") echo "Good Afternoon";;
   "y") echo "Good Morning";;
   "n") echo "Good Afternoon";;
   * ) echo "Sorry, answer not recognized";;
esac
}}}
เครื่องหมาย \* ใช้เป็นค่า default สำหรับตัวเลือก  ตัวอย่างต่อไปเป็นการปรับปรุงสคริปต์ให้เรียบง่ายและเข้าใจได้ง่ายขึ้น
{{{
#!/bin/bash
echo "Is it morning? Please answer yes or no"
read answ
case "$answ" in
    "yes" | "y" | "Yes" | "YES" ) echo "Good Morning";;
    "no" | "n" | "N" )  echo "Good Afternoon";;
    * ) echo "Sorry, anwser not recognized";;
esac
exit 0
}}}
==โอเปอเรเตอร์ทางตรรก AND และ OR==
	บางครั้งโปรแกรมเมอร์ต้องการเขียนชุดคำสั่งโดยมีเงื่อนไขที่ซับซ้อนมากขึ้นการใช้งาน if..elfi..else..fi แต่เพียงอย่างเดียวอาจทำให้เกิดความสับสนในการควบคุมโปรแกรม เช่นต้องการตรวจสอบว่ามีไฟล์ A หรือ B หรือ C หรือไม่ก็สามารถเขียนสคริปต์ได้ดังนี้
{{{
if [ -f file_A ]; then
	answ="True"
elif [ -f file_B ]; then
	answ="True"
elif [ -f file_C ]; then
	answ="True"
else
	answ="False"
fi
if [  "$answ" = "True" ]; then
	echo "At least one of the file exists"
else
	echo "No specified files found"
fi
}}}
จะเห็นได้ว่าลอจิกนั้นเป็น (file_A) OR (file_B) OR (file_C) เงื่อนไขที่ต้องการทั้งหมดจะเป็นจริง  เราสามารถแทน OR ได้ด้วยเครื่องหมาย || และสามารถแทน AND ได้ด้วยเครื่องหมาย && สคริปต์ก่อนหน้านี้สามารถเขียนใหม่ได้เป็น
{{{
if [ -f file_A] || [ -f file_B] || [ -f file_C]; then
	answ="True"
else
	answ="False"
fi
if [ "$answ" = "True"]; then
	echo "At least one of the file exists"
else
	echo "No specified files found"
fi
}}}
ตัวอย่างต่อไปเป็นการใช้ลอจิก AND ในการควบคุมการทำงานของโปรแกรม
{{{
#!/bin/bash
echo "Please enter 3 numbers"
echo "First number:"
read n1
echo "Second number:"
read n2
echo "Third number:"
read n3

if [ "$n1" = "1" ] && [ "$n2" = "3" ] && [ "$n3" = "5" ]
then
     echo "All numbers are odd"
else 
    echo "Some of them might be even"
fi
exit 0
}}}
โปรแกรมจะพิมพ์วลี "All numbers are odd" เฉพาะกรณีที่เลขเป็นคี่เรียงตามลำดับที่กำหนดไว้คือ 1, 3, และ 5 

----
[CourseSchedule2555_2 กลับไปหน้าหลัก]-->[<a href="https://code.google.com/p/system-programming-cs3402-at-crma/wiki/CourseSchedule2555_2#ตารางเรียน_๒๕๕๕/๒">ตารางเรียน</a>]-->[functionInShell (Next:ฟังก์ชัน)]