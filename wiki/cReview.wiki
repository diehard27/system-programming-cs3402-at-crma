#summary ทบทวนภาษา C
<table width=500>
<td>
[CourseSchedule2555_2 กลับไปหน้าหลัก]-->[<a href="https://code.google.com/p/system-programming-cs3402-at-crma/wiki/CourseSchedule2555_2#ตารางเรียน_๒๕๕๕/๒">ตารางเรียน</a>]-->Next: [cSysProg C กับ System Programming]
<wiki:toc max_depth="3" />

==ทบทวนภาษา C==
 ภาษาซี เป็นภาษาที่พัฒนาขึ้นในปี ค.ศ. 1972 โดย [http://en.wikipedia.org/wiki/Dennis_Ritchie Dennis Ritchie] แห่ง Bell Labs เป็นภาษาที่พัฒนามาจากภาษา B และจากภาษา BCPL ช่วงแรกภาษาซีถูกออกแบบให้เป็นภาษาที่ใช้เขียนโปรแกรมในระบบปฏิบัติการ UNIX และต่อมาในปี ค.ศ. 1978 Ritchie ได้ร่วมกับ Brain Kernighan แต่งหนังสือชื่อว่า "The C Programming Language" ทำให้ภาษาซีเป็นที่นิยมแพร่หลายเป็นอย่างมาก จนกระทั่งในปี ค.ศ. 1988 Ritchie และ Kernighan ได้ร่วมกับ ANSI (American National Standards Institute) กำหนดมาตรฐานของภาษาซีขึ้นมา โดยใช้ชื่อว่า "ANSI C"

==การคอมไพล์ภาษาซีในระบบปฏิบัติการลินุกซ์==
อธิบายใน [compilingCprogram]


==ตัวอักษรพิเศษ==
ตัวอักษรพิเศษ (Escape sequence) เป็นค่าคงที่ตัวอักษรชนิดหนึ่งของภาษาซี ใช้ในการควบคุมการแสดงผลและการทำหน้าที่พิเศษอื่น ๆ การเขียนจะใช้ตัวอักษร "\" (escape character) นำหน้าแล้วตามด้วยตัวอักษรพิเศษที่กำหนด ส่วนใหญ่ตัวอักษรพิเศษ จะเป็นตัวอักษร 32 ตัวแรกของรหัส [http://en.wikipedia.org/wiki/ASCII ASCII] ตัวอักษรพิเศษที่นิยมใช้ในการเขียนโปรแกรมภาษาซี มีดังนี้

||ตัวอักษรพิเศษ||รหัสแอสกี||ความหมาย||
||\0 ||0 || NULL, ตัวปิดท้ายข้อความ (string) ||
||\a ||7 || alert, bell, กำหนดให้มีเสียงบี๊บ 1 ครั้ง||
||\b ||8 || backspace, เลื่อนเคอร์เซอร์ย้อนกลับไป 1 ช่อง||
||\t ||9 || horizontal Tab,เลื่อนเคอร์เซอร์ไปตามแนวนอน 1 แท็บ ||  
||\n ||10 || new line, เลื่อนเคอร์ลงไป 1 บรรทัด||
||\v ||11 || Vertical tab, เลื่อนเคอร์เซอร์ไปตามแนวตั้ง 1 แท็บ ||
||\f ||12 || form feed, เลื่อนเคอร์เซอร์ไปที่บรรทัดแรกของหน้าใหม่ || 
||\r ||13 || return, เลื่อนเคอร์เซอร์กลับไปต้นบรรทัด||
||\\ ||- || แสดงผลตัวอักษร \ (backslash) ||
||\' ||- || แสดงผลตัวอักษร ' (single quote)|| 
||\" ||- || แสดงผลตัวอักษร " (double quote)||
||\000 ||-  || กำหนดค่าตัวเลขฐานแปดจำนวน 1 ตัวอักษร ||
||\xhh ||-  ||กำหนดค่าตัวเลขฐานสิบหกจำนวน 1 ตัวอักษร ||

==ค่าคงที่และตัวแปร==



==ชนิดข้อมูลแบบ Enumeration==
 Enumeration หรือ enum เป็นชนิดข้อมูลที่มีสมาชิกเป็น "เซต" ซึ่งมีลักษณะคล้ายกับการประกาศค่าคงที่ที่เป็นตัวเลข โดยค่าที่คืนออกมาจะเป็นตัวเลขเท่านั้น เราสามารถสร้างสมาชิกและกำหนดค่าของสมาชิกแต่ละตัวได้
 * ในกรณีที่ไม่ได้มีการกำหนดค่า 
  # ค่าสมาชิกตัวแรกจะมีค่าเป็น 0
  # ค่าของสมาชิกตัวถัดไปคือ ค่าของสมาชิกตัวก่อนหน้า+1

 ตัวอย่างของการใช้ enum แสดงได้ดังโค้ดด้านล่าง
{{{
  1 //enum.c
  2 //by narong phoomsuk
  3 #include <stdio.h>
  4 int main(void){
  5         enum student{Wuttichai,Chaiyapat,Kulsiri=6,Athiwat} cadet1;
  6         enum student cadet2 = Chaiyapat;
  7         enum student cadet3 = Kulsiri;
  8         cadet1 = Wuttichai;
  9         printf("cadet1 is %d\n",cadet1); # => cadet1 is 0
 10         printf("cadet2 is %d\n",cadet2); # => cadet2 is 1
 11         printf("cadet3 is %d\n",cadet3); # => cadet3 is 6
 12         return 0;
 13 }
}}}

===แบบฝึกหัด=== 
ผลของการรันโปรแกรมนี้คืออะไร
{{{
  1 //enum.c
  2 //by narong phoomsuk
  3 #include <stdio.h>
  4 int main(void){
  5         enum student{Wuttichai,Chaiyapat,Kulsiri=6,Athiwat,Eakburut=1,Sanwut} cadet1,cadet2;
  6         enum student cadet3 = Athiwat;
  7         cadet1 = Eakburut;
  8         printf("cadet3 is %d\n",cadet3);
  9         cadet2 = Sanwut;
 10         printf("cadet1 is %d\n",cadet1);
 11         printf("cadet2 is %d\n",cadet2);
 12         cadet1 = Wuttichai;
 13         printf("cadet2 is %d\n",cadet1);
 14
 15         return 0;
 16 }
}}}

==ฟังก์ชัน==
มีคำกล่าวไว้ว่า ภาษาซีเป็นภาษาฟังก์ชัน ซึ่งจะเห็นได้ว่าในการเขียนภาษาซีจะต้องประกาศฟังก์ชันอย่างน้อย 1 ฟังก์ชัน คือ main(){} และภาษาซีไม่มีโพรซีเจอร์ การเขียน sub routine จึงจำเป็นจะต้องใช้แต่ฟังก์ชันเท่านั้น ในกรณีที่ไม่ต้องการให้ sub routine ส่งค่า ต้องใช้ฟังก์ชันที่มีการส่งค่าเป็น void แทน
==ส่วนประกอบของฟังก์ชัน==
{{{
returnType functionName (argument1,argument2,...){   <--- Function Header
    
      statement;
      statement;
      statement;                                     <--- Function Body
      statement;
      ...
      statement;

}
}}}

===ส่วนหัวของฟังก์ชัน (Function Header)===
ส่วนหัวของฟังก์ชันจะเป็นตัวกำหนดรูปแบบการเรียกใช้ฟังก์ชัน การค่าที่จะส่งกลับหลังจากการเรียกใช้ฟังก์ชัน

====รูปแบบ====
_returnType_ *_functionName_* (_argument_);

||returnType||กำหนดชนิดของข้อมูลที่จะให้ฟังก์ชันส่งค่ากลับ ถ้าไม่ต้องการให้ส่งค่ากลับ ให้กำหนดเป็น void||
||functionName|| ชื่อของฟังก์ชัน||
||argument||กำหนดค่าหรือข้อมูลที่ส่งผ่านเข้าไปทำงานในฟังก์ชัน ถ้าไม่ต้องการให้ส่งค่ากลับ ให้กำหนดเป็น void||

===ส่วนตัวฟังก์ชัน (Function Body)===
ส่วนตัวฟังก์ชัน เป็นส่วนหลักในการทำงานของฟังก์ชัน จะประกอบด้วยชุดคำสั่ง (statement) หรือนิพจน์ (expression) ต่าง ๆ ซึ่งจะอยู่ใน block ของเครื่องหมายวงเล็บปีกกา {}

==ต้นแบบฟังก์ชัน==
 ต้นแบบฟังก์ชัน (Function Prototype) จะเป็นการกำหนด Function Header อีกแบบหนึ่ง 

===Pass by Value===

===Pass by Reference===
มักใช้ในกรณีที่ต้องการ return ค่ามากกว่า 1 ค่าในภาษาซี

==ชนิดข้อมูลแบบ struct==



==ตัวแปรแบบตัวชี้==

=References=
  # Robert Love, _LINUX System Programming_ , O'Rielly, 2007.[http://mirror.paramadina.ac.id/pub/linux/doc/book/Linux.System.Programming.pdf  PDF]
----
[CourseSchedule2555_2 กลับไปหน้าหลัก]-->[<a href="https://code.google.com/p/system-programming-cs3402-at-crma/wiki/CourseSchedule2555_2#ตารางเรียน_๒๕๕๕/๒">ตารางเรียน</a>]-->Next: [cSysProg C กับ System Programming]

[https://code.google.com/p/system-programming-cs3402-at-crma/w/edit/cReview Edit]