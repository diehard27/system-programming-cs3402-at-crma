#summary C กับการติดต่อกับ Shell
<table width=500>
<td>
[CourseSchedule2555_2 กลับไปหน้าหลัก]-->[<a href="https://code.google.com/p/system-programming-cs3402-at-crma/wiki/CourseSchedule2555_2#ตารางเรียน_๒๕๕๕/๒">ตารางเรียน</a>]-->Next: [cSysProg C กับ System Programming]
<wiki:toc max_depth="3" />

==Process==
 ความหมายของ Process ที่ถูกใช้บ่อย ๆ คือ "โปรแกรมที่กำลังประมวลผลอยู่" โดยคำว่า process จะมีความหมายเช่นเดียวกับ job หรือ task โดยในแต่ละ Process จะมีรายละเอียดต่าง ๆ ดังนี้
 * ทุก ๆ Process จะมี "process ID" ซึ่งเป็นเลขไม่ซ้ำกัน (Unique)
 * process ID จะมีค่าเป็นเลขจำนวนเต็มบวกเสมอ
 * ถึงแม้ processID จะไม่ซ้ำกัน, แต่เลข process ID จะถูกนำกลับมาใช้ใหม่ได้
 * แต่ละ processID จะมีสถานะในการประมวลผล (state)
ในระบบที่มีตัวประมวลผลเดียว ก็ยังสามารถรันหลาย ๆ process ได้ในเวลาเดียวกัน เช่นเดียวกับระบบที่มีตัวประมวลผลหลายตัว การเรียกโปรแกรมให้ทำงานเป็นการเริ่มต้นการสร้าง process เมื่อโปรแกรมถูกรัน process จะถูกสร้างขึ้นและมีการจ่าย processID ให้กับ process นั้น โดยฟังก์ชัน getpid() จะสามารถแสดง processID ของ process ที่กำลังรันอยู่ได้

==ฟังก์ชัน getpid()==
เป็นฟังก์ชันที่อยู่ใน library <unistd.h> ใช้ในแสดงเลข processID ของโปรแกรมที่กำลังทำงานอยู่

ตัวอย่างการทำงานของ getpid() แสดงดังโค้ดด้านล่าง

{{{
  1 //getpid.c
  2 #include <stdio.h>
  3 #include <unistd.h>
  4 int main(void){
  5         printf("Hello, this is process ID %d\n",getpid());
  6         return 0;
  7 }

}}}
โดยปกติแล้ว ProcessID จะถูกตั้งค่าสูงสุดไว้ที่ 32768 เพื่อรองรับกับระบบปฏิบัติการ UNIX แบบเก่าที่ใช้สถาปัตยกรรม 16 บิต อย่างไรก็ตาม เราสามารถเข้าไปแก้ไขค่า Maximum processID ได้ ที่  /proc/sys/kernel/pid_max


ในเครื่องที่มีตัวประมวลผลเดี่ยว แต่ละ Process จะถูกเรียกเข้ามาประมวลผล ในช่วงเวลาอันสั้น เราสามารถใช้คำสั่ง ps สำหรับแสดง processID ทั้งหมดที่กำลังทำงานอยู่ได้ โดยคำสั่ง ps จะแสดง ProcessID, ชื่อของ terminal(TTY), เวลาที่ Process ใช้ในการประมวลผล (TIME), และคำสั่งที่กำลังประมวลผลอยู่ (CMD)

{{{
$ ps
  PID TTY          TIME CMD
 6506 pts/2    00:00:00 bash
 6573 pts/2    00:00:00 ps

}}}
 อย่างไรก็ตาม คำสั่ง ps จะแสดงเฉพาะ Process ของผู้ใช้ที่กำลังประมวลผลอยู่ ณ ปัจจุบัน แต่เราสามารถใช้ flag เพื่อให้แสดง process ทั้งหมดได้ด้วย flag "-a", และยังสามารถแสดงข้อมูล process ในแบบเต็มรูปได้ด้วย flag "-l"

ข้อมูลเพิ่มเติมของแต่ละ process ได้แก่
||PID|| เลข processID ที่เป็นเลขจำนวนเต็มบวก||
||PPID|| เลข processID แม่ (Parent Process) ที่เป็นเลขจำนวนเต็มบวก||
||STAT|| สถานะของ Process||
||TIME|| CPU Time ที่ process ใช้ (เป็นวินาที)||
||TT|| ชื่อ control terminal ของ Process||
||CMD|| คำสั่งของผู้ใช้ ที่เป็นตัวเริ่ม Process||

==Process Hierachy==
ในแต่ละ Process จะมี Parent Process (process แม่) ซึ่งก็คือ Process ที่ได้สร้าง Process ใหม่ขึ้นมารัน ส่วน Process ที่ถูก Parent สร้างขึ้นมา จะเรียกว่า Child Process (process ลูก) 

=References=
  # Wiil-Hans Steeb, et al, _Linux, Shell Programming and Perl_ [http://issc.uj.ac.za/downloads/linux.pdf  PDF]
  # Ananda Gunawardena, _Process Control_ [http://www.cs.cmu.edu/~guna/15-123S11/Lectures/Lecture25.pdf PDF]
  # March H. Scholl, _Process Control Subsystem_ [http://www.inf.uni-konstanz.de/dbis/teaching/ss09/os/L2.pdf PDF]

----
[CourseSchedule2555_2 กลับไปหน้าหลัก]-->[<a href="https://code.google.com/p/system-programming-cs3402-at-crma/wiki/CourseSchedule2555_2#ตารางเรียน_๒๕๕๕/๒">ตารางเรียน</a>]-->Next: [cSysProg C กับ System Programming]

[https://code.google.com/p/system-programming-cs3402-at-crma/w/edit/CShell Edit]