#summary ฟังก์ชั่นในเชลล์สคริปต์
[CourseSchedule2555_2 กลับไปหน้าหลัก]-->[<a href="https://code.google.com/p/system-programming-cs3402-at-crma/wiki/CourseSchedule2555_2#ตารางเรียน_๒๕๕๕/๒">ตารางเรียน</a>]

<table width=500>
<td>
<wiki:toc max_depth="3" />

=ฟังก์ชั่น=
ฟังก์ชั่นทำงานเช่นเดียวกับโปรแกรมย่อย (subroutine) มีลักษณะเป็นโมดูล มีอินพุทและเอาท์พุท และมีการประมวลผลภายใน มีสโคปของตัวเองเช่นมี local variable

==รูปแบบของฟังก์ชั่นเป็นดังนี้==
{{{
function_name() {
	statements
}
}}}

ยกตัวอย่างเช่น
{{{
#!/bin/bash
myfunc() {
	echo "Executing my function"
}

echo "Started script $0"
myfunc
echo "Script $0 ended"
}}}

==การประกาศฟังก์ชั่น==
การประกาศฟังก์ชั่นจะทำก่อนการเรียก โดยทั่วไปแล้วจะเขียนรายละเอียดของฟังก์ชั่นไว้ที่ส่วนแรก ๆ ของสคริปต์ จากนั้นเวลาจะใช้งานจะเรียกเพียงชื่อสคริปต์ เช่นในตัวอย่างนี้คือ myfunc นั่นเอง
	การเพิ่มฟังก์ชั่นเข้าไปใน environment ของเชลล์สามารถทำได้ตามตัวอย่างต่อไปนี้  สมมุติว่าเราต้องการสร้างฟังก์ชั่น โมดูลัส หรือการหาเศษที่เหลือของการหาร เพื่อให้สามารถเรียกใช้ได้จากเชลล์โดยตรง ขั้นเแรกให้ทำการสร้างไฟล์ที่มีฟังก์ชั่นตามต้องการ mod.sh และขั้นที่สองคือการโหลดเข้าไปใน environment ด้วย . mod.sh

{{{
modulus()
{
    echo $(($1%$2))
}
}}}

จากนั้นที่พรอมท์ให้รันคำสั่ง  .  mod.sh  (เครื่องหมายจุดคั่นด้วย space แล้วตามด้วยไฟล์ที่บรรจุฟังก์ชั่นนั้น) แล้วทดลองรันคำสั่ง set จะสังเกตุเห็นว่าฟังก์ชั่น modulus() ได้ถูกบันทึกไว้ใน environment เรียบร้อยแล้วผู้ใช้เพียงพิมพ์คำสั่งต่อไปนี้
{{{
# modulus 20 8
4 
}}}
จะได้ผลลัพธ์เท่ากับ 4 เนื่องจาก 20 หารด้วย 8 มีค่าเท่ากับ 2 เศษ 4 นั่นเอง

ตัวอย่างต่อไปเป็นการสร้างกลุ่มของคำสั่งให้เป็นลักษณะบล็อคโดยให้อยู่ภายเครื่องหมายวงเล็บปีกกา { .. } โดยใช้ร่วมกับเงื่อนไขทางตรรก 

{{{
#!/bin/bash
tmpfile=temp_$$
yes_or_no() {
	while true
	do
	echo "Enter yes or no"
	read ans
	case "$ans" in
		y | yes ) return 0;;
		n | no ) return 1;;
		* ) echo "Only accept yes or no"
	esac
	done
}

yes_or_no && {
	who > $tmpfile
	grep "secret" $tmpfile
}
}}}

ในกรณีที่ผู้ใช้ตอบ yes หรือ y โปรแกรมจะตรวจสอบว่า who ทำงานและให้ค่ากลับมาที่เป็นจริงหรือไม่ (return 0) ถ้าเป็นจริงจะเขียนเอาพุทของการรันไว้ในไฟล์ tmp_หมายเลขโพรเซส 

==การส่งผ่านพารามิเตอร์==
การส่งผ่านพารามิเตอร์ไปยังฟังก์ชั่นและการคืนค่าด้วย return นั้นมีลักษณะเช่นเดียวกับการใช้งานสคริปต์จากเชลล์ ตัวอย่างต่อไปนี้เป็นการแสดงการส่งพารามิเตอร์เข้ามายังสคริปต์และการส่งพารามิเตอร์เข้าไปยังฟังก์ชั่น

{{{
#!/bin/bash
myfunc() {
    echo "----Function called"
    echo "----Parameters to this func: $*"
}
#Main body of script
echo "Script $0 started..."
echo "Parameters to $0 is $*"
echo "Calling function..."
myfunc "Passing this to myfunc"
echo "Script $0 stopped"
exit 0
}}}

ให้สังเกตุพารามิเตอร์ของฟังก์ชั่นจะแตกต่างจาก พารามิเตอร์ของตัวสคริปต์เอง เช่น $1 $2 ของฟังก์ชั่นจะแตกต่างจาก $1 $2 ของสคริปต์ที่ได้รับพารามิเตอร์มาจากเชลล์

==ตัวแปร local==
ผู้เขียนโปรแกรมสามารถกำหนดให้ฟังก์ชั่นใช้ตัวแปรแบบ local ที่กำหนดขึ้นไว้ใช้ภายในฟังก์ชั่นเอง โดยหากมีชื่อซ้ำกันกับตัวแปรแบบ global จะเรียกใช้ตัวแปรแบบ local ก่อนดังตัวอย่างต่อไปนี้

{{{
#!/bin/bash
text="This is global variable"
myfunc() {
    local text="But this is local"
    echo "Called myfunc"
    echo $text
}
## main script body
echo "Script $0 started"
echo $text
# now calling function
myfunc
echo "Script $0 stopped"
exit 0
}}}

สคริปต์นี้มีตัวแปรชื่อ text ในตัวฟังก์ชั่น myfunc และภายนอกฟังก์ชั่น ตัวแปร text ที่อยู่ในกรอบของฟังก์ชั่นจะเรียกว่า local variable ส่วนตัวแปรที่อยู่นอกกรอบของฟังก์ชั่น แต่อยู่ในตัวของสคริปต์นั้นจะเรียกว่า global variable

การคืนค่าออกจากฟังก์ชั่นจะใช้คำสั่ง return เช่นเดียวกับในสคริปต์ ส่วนการตรวจสอบค่าที่ให้กลับมาจะใช้คำสั่ง $? ดังต้วอย่างต่อไปนี้

==การเรียนฟังก์ชันซ้อนกัน==
โปรแกรมเมอร์สามารถเขียนฟังก์ชันแล้วเรียกซ้อนกันได้ เช่นเดียวกับการโปรแกรมในภาษาระดับสูงทั่วไป ตัวอย่างต่อไป แสดงการลำดับการเรียกฟังก์ชั่น ซึ่งสามารถเรียกซ้อนกันได้เพื่อให้ control structure ตอบสนองความต้องการผู้ใช้
{{{
#!/bin/bash
subfunc() {
  echo "____.____Started subfunc()"
}
myfunc() {
  echo "____Started myfunc()"
  subfunc
}

## main script body ##
echo Started main script
myfunc
exit 0
}}}
ซึ่งจะให้ผลลัพธ์ดังนี้
{{{
prachya@pcubusrv104:~/www/shell$ ./func-hirac.sh
Started main script
____Started myfunc()
____.____Started subfunc()
}}}

==แบบฝึกหัด==

==อ้างอิง==